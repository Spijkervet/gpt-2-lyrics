{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyComponent","props","attachQuillRefs","reactQuillRef","getEditor","quillRef","formats","modules","toolbar","container","keyboard","bindings","tab","key","handler","console","log","text","getText","state","date","Date","temperature","length","language","title","healthcheck","status","changeTemperature","bind","changeLength","ref","React","createRef","handleLanguage","generateText","handleChange","setTitle","healthCheck","this","value","setState","e","target","editor","makeUnprivilegedEditor","selection","getSelection","substr","index","fetch","method","cache","credentials","headers","body","JSON","stringify","redirect","referrerPolicy","then","response","json","jsonData","arr","i","j","insertText","push","catch","error","setTimeout","ok","className","type","min","max","defaultValue","step","onChange","id","style","color","onClick","theme","el","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2f77847.chunk.js","sourcesContent":["import React from 'react';\n\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nimport QuillMention from 'quill-mention'\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      date: new Date(),\n      temperature: 0.7,\n      length: 40,\n      language: \"en\",\n      title: \"Title\",\n      text: \"\",\n      healthcheck: \"Offline\",\n      status: \"Ready\"\n    };\n\n    this.changeTemperature = this.changeTemperature.bind(this)\n    this.changeLength = this.changeLength.bind(this)\n    this.ref = React.createRef();\n    this.handleLanguage = this.handleLanguage.bind(this)\n\n    this.quillRef = null;      // Quill instance\n    this.reactQuillRef = null; // ReactQuill component\n    this.generateText = this.generateText.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.setTitle = this.setTitle.bind(this)\n    this.healthCheck = this.healthCheck.bind(this)\n\n  }\n\n  componentDidMount() {\n    this.attachQuillRefs()\n    this.healthCheck()\n  }\n\n  componentDidUpdate() {\n    this.attachQuillRefs()\n  }\n\n  attachQuillRefs = () => {\n    if (typeof this.reactQuillRef.getEditor !== 'function') return;\n    this.quillRef = this.reactQuillRef.getEditor();\n  }\n\n  handleChange(value) {\n    this.setState({ text: value })\n  }\n\n  changeTemperature(e) {\n    this.setState({\n      temperature: e.target.value\n    })\n  }\n\n  changeLength(e) {\n    this.setState({\n      length: e.target.value\n    })\n  }\n\n  handleLanguage(e) {\n    this.setState({ language: e.target.value });\n  }\n\n  setTitle(e) {\n    this.setState({ title: e.target.value })\n  }\n\n  formats = [\n    'header', 'bold', 'italic', 'underline', 'strike', 'color', 'align', 'indent', 'mention'\n  ]\n\n  modules = {\n    toolbar: {\n      container: '#toolbar',  // Selector for toolbar container\n    },\n    keyboard: {\n      bindings: {\n        // This will overwrite the default binding also named 'tab'\n        tab: {\n          key: 9,\n          handler: () => {\n            console.log('tab')\n            var text = this.quillRef.getText()\n            console.log(text)\n          }\n        }\n      }\n    }\n  }\n\n\n  generateText() {\n    const editor = this.reactQuillRef.getEditor();\n    const unprivilegedEditor = this.reactQuillRef.makeUnprivilegedEditor(editor);\n    // You may now use the unprivilegedEditor proxy methods\n    var text = unprivilegedEditor.getText();\n\n    var selection = editor.getSelection(true)\n\n    text = text.substr(0, selection.index)\n    text = this.state.title + \"\\n\" + text\n\n    this.state.status = \"Generating...\"\n    return fetch(\"http://lyrics.jspijkervet.com/gpt2_lyrics\", {\n      method: 'POST',\n      // mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit', // include, *same-origin, omit\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'prompt': text,\n        'temperature': this.state.temperature,\n        'length': this.state.length,\n        'language': this.state.language\n      }),\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *client\n    })\n      .then(response => response.json())\n      .then((jsonData) => {\n\n        var arr = []\n        for (var i = 0; i < jsonData['lyrics'].length; i++) {\n          var j = {}\n          j['id'] = i + 1\n          j['value'] = jsonData['lyrics'][i]\n          this.quillRef.insertText(selection.index, j['value']);\n          arr.push(j)\n        }\n        console.log(arr)\n        this.state.status = \"Ready\"\n      })\n      .catch((error) => {\n        console.error(error)\n        this.state.status = \"Server Error\"\n      })\n  }\n\n  healthCheck() {\n    setTimeout(this.healthCheck, 2000)\n\n    fetch(\"http://lyrics.jspijkervet.com/health\", {\n      method: 'POST'\n    })\n      .then((response) => {\n        if (response.ok) {\n          this.setState({ healthcheck: \"Online\" })\n        }\n      })\n      .catch((error) => {\n        this.setState({ healthcheck: \"Offline\" })\n      })\n\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"sliders\">\n          <div className=\"slider-container\">\n            <span className=\"slider-name\">Lijpe slider</span>\n            <small>{this.state.temperature}</small>\n            <input className=\"slider\" type=\"range\" min=\"0\" max=\"1\" defaultValue={this.state.temperature} step=\"0.1\" onChange={this.changeTemperature} />\n          </div>\n          <div className=\"slider-container\">\n            <span className=\"slider-name\">Words</span>\n            <small>{this.state.length}</small>\n            <input className=\"slider\" type=\"range\" min=\"1\" max=\"1000\" defaultValue={this.state.length} step=\"20\" onChange={this.changeLength} />\n          </div>\n          <div className=\"slider-container\">\n            <select id=\"lang\" onChange={this.handleLanguage} value={this.state.language}>\n              <option value=\"en\">English</option>\n              <option value=\"nl\">Nederlands</option>\n            </select>\n          </div>\n          <div className=\"slider-container\">\n            <span className=\"slider-name\">Server</span>\n            <span style={{color: 'green'}}>{this.state.healthcheck}</span>\n          </div>\n          <div className=\"slider-container\">\n          <span className=\"slider-name\">Status</span>\n          <span style={{color: 'orange'}}>{this.state.status}</span>\n          </div>\n        </div>\n        <hr />\n\n\n        <div id=\"toolbar\">\n          <span className=\"ql-formats\">\n            <button className=\"generate-button\" onClick={this.generateText}>Generate</button>\n          </span>\n          <span className=\"ql-formats\">\n            <select className=\"ql-header\">\n              <option value=\"1\">Heading 1</option>\n              <option value=\"2\">Heading 2</option>\n              <option value=\"3\">Heading 3</option>\n              <option value=\"4\">Heading 4</option>\n              <option value=\"5\">Heading 5</option>\n              <option value=\"6\">Heading 6</option>\n              <option value=\"\">Normal</option>\n            </select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-bold\"></button>\n            <button className=\"ql-italic\"></button>\n            <button className=\"ql-underline\"></button>\n            <button className=\"ql-strike\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-align\" value=\"\"></button>\n            <button className=\"ql-align\" value=\"center\"></button>\n            <button className=\"ql-align\" value=\"right\"></button>\n            <button className=\"ql-align\" value=\"justify\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <select className=\"ql-color\"></select>\n            <select className=\"ql-background\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-blockquote\"></button>\n          </span>\n        </div>\n\n\n        <div className=\"title-container\">\n          <input className=\"title\" value={this.state.title} onChange={this.setTitle}></input>\n        </div>\n\n        <ReactQuill value={this.state.text}\n          onChange={this.handleChange}\n          theme=\"snow\"\n          modules={this.modules}\n          formats={this.formats}\n          ref={(el) => { this.reactQuillRef = el }}>\n        </ReactQuill>\n      </div>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"page-inner\">\n            <MyComponent\n            />\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}